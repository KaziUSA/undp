{% extends '::frontend.html.twig' %}

{% block body -%}
<section class="content">
    <div class="row row-no-padding">
        <div class="col-sm-3 col-md-3 col-lg-2">
            <aside>
                <div class="filter">
                  <!-- Nav tabs -->
                  <div class="feedback-tab clearfix">
                    <div class="tab-head">Feedback Round</div>

                      <ul id="" class="nav nav-tabs" role="tablist">
                        {# <li role="presentation" class="round1"><a href="#round1" aria-controls="home" role="tab" data-toggle="tab">1</a></li>
                        <li role="presentation" class="round2"><a href="#round1" aria-controls="profile" role="tab" data-toggle="tab">2</a></li> #}
                        <li role="presentation" class="active round3"><a href="#round1" aria-controls="messages" role="tab" data-toggle="tab" value="2015">2015</a></li>
                        {# <li role="presentation" class="round4"><a href="#round1" aria-controls="settings" role="tab" data-toggle="tab" value="2016">2016</a></li>
                       <li role="presentation" class="round5"><a href="#round1" aria-controls="settings" role="tab" data-toggle="tab">5</a></li>
                        <li role="presentation" class="round6"><a href="#round1" aria-controls="settings" role="tab" data-toggle="tab">6</a></li> #}

                      </ul>
                  </div>

                  <!-- Tab panes -->
                  <div class="tab-content">
                    <div role="tabpanel" class="tab-pane fade in active" id="round1">
                        <div class="tab-content-wrap">
                            <div class="filter-title">Filter By</div>

                            <div class="accordion">
                                    <form action="">
                                      <div class="ac">
                                        {# ac-1 #}
                                        <input class="ac-input" id="ac-1" name="ac-1" type="checkbox" />
                                        <label class="ac-label month-label" for="ac-1">Month</label>

                                        <ul class="ac-text checkbox-style">
                                            <li><input type="checkbox" id="month-all" value="" />
                                                <label for="month-all">All<span></span></label></li>
                                            <div class="form_months" id="form_months">
                                                <li><input class="month" type="checkbox" id="month7" value="7" /><label for="month7">July<span></span></label></li><li><input class="month" type="checkbox" id="month8" value="8"/><label for="month8">August<span></span></label></li><li><input class="month" type="checkbox" id="month9" value="9"/><label for="month9">September<span></span></label></li><li><input class="month" type="checkbox" id="month10" value="10" /><label for="month10">October<span></span></label></li><li><input class="month" type="checkbox" id="month11" value="11"/><label for="month11">November<span></span></label></li><li><input class="month" type="checkbox" id="month12" value="12"/><label for="month12">December<span></span></label></li>
                                            </div>
                                        </ul><!--/ac-text-->
                                      </div><!--/ac-->


                                      <div class="ac">
                                        {# ac-2 #}
                                        <input class="ac-input" id="ac-2" name="ac-2" type="checkbox" />
                                        <label class="ac-label district-label" for="ac-2">District</label>

                                        <ul class="ac-text checkbox-style">
                                            <li><input type="checkbox" id="district-all" value="" />
                                                <label for="district-all">All<span></span></label></li>
                                            {{ form(form.districts) }}
                                        </ul>
                                      </div><!--/ac-->


                                      <div class="ac">
                                        {# ac-3 #}
                                        <input class="ac-input" id="ac-3" name="ac-3" type="checkbox" />
                                        <label class="ac-label gender-label" for="ac-3">Gender</label><!-- initially showing active -->

                                        <ul class="ac-text checkbox-style">
                                            <li><input type="checkbox" id="gender-all" value="" />
                                                <label for="gender-all">All<span></span></label></li>
                                            {{ form(form.gender) }}
                                        </ul>
                                      </div><!--/ac-->


                                      <div class="ac">
                                        {# ac-4 #}
                                        <input class="ac-input" id="ac-4" name="ac-4" type="checkbox" />
                                        <label class="ac-label ethnicity-label" for="ac-4">Ethnicity</label>

                                        <ul class="ac-text checkbox-style">
                                            <li><input type="checkbox" id="ethnicity-all" value="" />
                                                <label for="ethnicity-all">All<span></span></label></li>
                                            {{ form(form.ethnicities) }}
                                        </ul>
                                      </div><!--/ac-->


                                      <div class="ac">
                                        {# ac-5 #}
                                        <input class="ac-input" id="ac-5" name="ac-5" type="checkbox" />
                                        <label class="ac-label age-label" for="ac-5">Age Group</label>

                                        <ul class="ac-text checkbox-style">
                                            <li><input type="checkbox" id="age-all" value="" />
                                                <label for="age-all">All<span></span></label></li>
                                            {{ form(form.agegroups) }}
                                        </ul>
                                      </div><!--/ac-->


                                      <div class="ac">
                                        {# ac-6 #}
                                        <ul class="checkbox-style">
                                            <div id="form_disability">
                                              <li><input type="checkbox" id="disability" />
                                              <label for="disability">Disability<span></span></label></li>
                                            </div>
                                        </ul>
                                      </div><!--/ac-->

                                      <input type="submit" value="Submit" class="btn btn-bordered gray">
                                  </form>

                            </div><!--/accordion-->
                        </div>
                    </div>
                  </div>
                </div>
            </aside>
        </div>

        <div class="col-sm-9 col-md-9 col-lg-10">
            <!-- main content -->
            <div class="main-content">
                <div class="question">
                    <!--<div class="number">Question 9</div>
                    Are your main problems being adressed ?-->
                    <a href="#!" class="next" onclick="btnNextQuestion_Click()"></a>
                    <a href="#!" class="prev" onclick="btnPrevQuestion_Click()"></a>

                    <div id="zelect">{{ form(form.questions) }}</div>
                </div>

                <div class="chart">
                    <div class="search">
                      <span class="search-title">Search</span>
                      <span id="filter-search-key">
                        <!--Month / District / Age Group / Gender -->
                        <span id="month-select-text"></span>
                        <span id="district-select-text"></span>
                        <span id="gender-select-text"></span>
                        <span id="ethnicity-select-text"></span>
                        <span id="age-select-text"></span>
                      </span>
                    </div>

                    <div class="high-chart clearfix">
                        <div class="high-chart-wrap">
                            <div id="canvas" class="chart-container"></div>

                            <!-- <canvas id="canvas" height="140"></canvas> -->

                            <!-- custom legend -->
                            <div class="legend-box clearfix">
                                {# <div class="legend legend1">
                                    <div class="legend-head">Priority need</div>
                                    <ul>
                                        <li>Temporary shelter</li>
                                        <li>Fresh Food</li>
                                    </ul>
                                </div> #}
                                <div class="legend legend2">
                                    <div class="legend-head">Respondents</div>
                                    <ul>
                                        <li>1400</li>
                                    </ul>
                                </div>
                                <div class="legend legend3 download">
                                    <ul>

                                        <li><a href="#!" id="download-report"><span class="icon icon-download"></span> Download Chart</a></li>
                                        {# <li><a href="#!"><span class="icon icon-share"></span> Share Report</a></li> #}

                                    </ul>
                                </div>
                            </div>
                        </div>

                        <div id="table1" class="chart-table table-responsive"></div>
                        <!-- <div class="download pull-right"><a href="#!" id="download-table"><span class="icon icon-download"></span> Download Table</a></div> -->
                    </div>
                </div>
            </div><!-- /.main-content -->
        </div>
    </div>
</section>
{% endblock %}
{%block scriptIncludes %}

<!--<script src="http://code.highcharts.com/stock/highstock.js"></script>
<script type="text/javascript" src="js/exporting.js"></script>-->
<!-- <script src="js/Chart.HorizontalBar.js"></script> -->
    <script src="/js/frontend/custom-filter.js"></script>
    <script>
    //get url parameter
    var getUrlParameter = function getUrlParameter(sParam) {
    var sPageURL = decodeURIComponent(window.location.search.substring(1)),
        sURLVariables = sPageURL.split('&'),
        sParameterName,
        i;

    for (i = 0; i < sURLVariables.length; i++) {
        sParameterName = sURLVariables[i].split('=');

        if (sParameterName[0] === sParam) {
            return sParameterName[1] === undefined ? true : sParameterName[1];
        }
    }
    };
    
    //get array parameter from url
    /*url = window.location.href;
    var paramsList = url.slice(url.indexOf("?")+1,url.length) ;
    var filteredList =  paramsList.split("&") ;

    // an object to store arrays
    var objArr = {} ;

    // the below loop is obvious... we just remove the [] and +.. and split into pair of key and value.. and store as an array...
    for (var i=0, l=filteredList.length; i <l; i +=1 ) {
      var param = decodeURIComponent(filteredList[i].replace("[]","")).replace(/\+/g," ") ;
      var pair = param.split(",") ;//=
      if(!objArr[pair[0]]) {  objArr[pair[0]] = [] ;}
      objArr[pair[0]].push(pair[1]);
    }*/

    //convert object array to array
    /*var array = $.map(objArr, function(value, index) {
        return [value];
    });*/

    //clone array
    function clone(obj){
        if(obj == null || typeof(obj) != 'object')
            return obj;
        var temp = obj.constructor();
        for(var key in obj)
            temp[key] = clone(obj[key]);
        return temp;
    }

    //Ajax call
    function aButtonPressed(){
      //store ques name
      var qname=$("#form_questions option:selected").text();
      //store selected question in questions variable
      var questions=document.getElementById('form_questions').selectedIndex;
      questions=document.getElementsByTagName("option")[questions].value;
      if(questions == '') { questions = 1; }//for default chart
      //alert(questions);
       //store year in yearVal
       var yearVal=$('.feedback-tab ul.nav li.active a').attr('value');
       //alert(yearVal);
       //store selected month in monthVals
       var monthVals = [];
       $('#form_months :checked').each(function() {
         monthVals.push($(this).next("label").text());
       });
       //alert(monthVals);       

       if(monthVals == '') {
         urlParamM = getUrlParameter('m');//from http://localhost:8000/platform/?d=Bhaktapur,Kathmandu&=July
         console.log(urlParamM);
         if(urlParamM != undefined) {
           arr = urlParamM.split(',');//convert string to url
           //myArr = ['Bhaktapur','Kathmandu'];//custom to test
           monthVals = clone(arr);//clone array
         }
         //checking checkbox
         function logArrayElements(element, index, array) {
            $('#form_months label').each(function() {   
              if($(this).text() == element) {
                $(this).prev("input").prop('checked', true);
              }
            });
          }
         monthVals.forEach(logArrayElements);
       }

       //store selected district in districtVals
       var districtVals = [];
       $('#form_districts :checked').each(function() {
         districtVals.push($(this).next("label").text());
       });
       //alert(districtVals);

       if(districtVals == '') {
         urlParamD = getUrlParameter('d');//from http://localhost:8000/platform/?d=Bhaktapur,Kathmandu&=July
         console.log(urlParamD);
         if(urlParamD != undefined) {
           arr = urlParamD.split(',');//convert string to url
           //myArr = ['Bhaktapur','Kathmandu'];//custom to test
           districtVals = clone(arr);//clone array
         }
         //checking checkbox
         function logArrayElements(element, index, array) {
            $('#form_districts label').each(function() {   
              if($(this).text() == element) {
                $(this).prev("input").prop('checked', true);
              }
            });
          }
         districtVals.forEach(logArrayElements);
       }

       //store selected gender in genderVals array
      var genderVals = [];
       $('#form_gender :checked').each(function() {
         genderVals.push($(this).next("label").text());
       });
       //alert(genderVals);

       if(genderVals == '') {
         urlParamG = getUrlParameter('g');
         //from http://localhost:8000/platform/?d=Bhaktapur,Kathmandu&g=Female,Male
         if(urlParamG != undefined) {
           arrG = urlParamG.split(',');//convert string to url
           //myArr = ['Female','Male'];//custom to test
           genderVals = clone(arrG);//clone array
         }         
         //checking checkbox
         function logArrayElements(element, index, array) {
            $('#form_gender label').each(function() {     
              console.log($(this).text());         
              if($(this).text() == element) {
                $(this).prev("input").prop('checked', true);
              }
            });
          }
         genderVals.forEach(logArrayElements);
       }

      //store selected ethnicity in ethnicityVals
      var ethnicityVals = [];
       $('#form_ethnicities :checked').each(function() {
         ethnicityVals.push($(this).next("label").text());
       });
       //alert(ethnicityVals);

       if(ethnicityVals == '') {
         urlParamE = getUrlParameter('e');//from localhost:8000/platform/?d=Bhaktapur,Kathmandu&g=Female,Male&m=July,August&e=Brahmin,Chhetri
         console.log(urlParamE);
         if(urlParamE != undefined) {
           arr = urlParamE.split(',');//convert string to url
           //myArr = ['Bhaktapur','Kathmandu'];//custom to test
           ethnicityVals = clone(arr);//clone array
         }
         //checking checkbox
         function logArrayElements(element, index, array) {
            $('#form_ethnicities label').each(function() {   
              if($(this).text() == element) {
                $(this).prev("input").prop('checked', true);
              }
            });
          }
         ethnicityVals.forEach(logArrayElements);
       }

      //store checked ages in ageVals array
      var ageVals = [];
       $('#form_ages :checked').each(function() {
         ageVals.push($(this).next("label").text());
       });
       //alert(ageVals);       

       if(ageVals == '') {
         urlParamA = getUrlParameter('a');//from localhost:8000/platform/?d=Bhaktapur,Kathmandu&g=Female,Male&m=July,August&a=15 - 24,25 - 39
         console.log(urlParamA);
         if(urlParamA != undefined) {
           arr = urlParamA.split(',');//convert string to url
           //myArr = ['Bhaktapur','Kathmandu'];//custom to test
           ageVals = clone(arr);//clone array
         }
         //checking checkbox
         function logArrayElements(element, index, array) {
            $('#form_ages label').each(function() {   
              if($(this).text() == element) {
                $(this).prev("input").prop('checked', true);
              }
            });
          }
         ageVals.forEach(logArrayElements);
       }

       if($('#disability').prop('checked')){
        disabilityVal="1";
       }
       else{
        disabilityVal="0";
       }
       //alert(disabilityVal);

       //for default chart show: on page load
       //TODO: need to show Jan, Feb, Mar Data rather than Gender if it shows data
       //TODO: need to fix the height of the total respondants section
       // if(genderVals == '' && ageVals == '' && ethnicityVals == '' && districtVals == '' && monthVals == '') {
       //  monthVals.push('July');
       //  monthVals.push('August');
       //  monthVals.push('September');
       //  $("input#month-all, #form_months input[type=checkbox]").prop('checked', true);
       //  $('#month-select-text').html('Month');
       // }

       if(monthVals != '') {
        $('#month-select-text').html('Month /');
       } else {
        $('#month-select-text').html('');
       }

       if(districtVals != '') {
        $('#district-select-text').html('District /');
       } else {
        $('#district-select-text').html('');
       }

       if(genderVals != '') {
        $('#gender-select-text').html('Gender /');
       } else {
        $('#gender-select-text').html('');
       }

       if(ethnicityVals != '') {
        $('#ethnicity-select-text').html('Ethnicity /');
       } else {
        $('#ethnicity-select-text').html('');
       }

       if(ageVals != '') {
        $('#age-select-text').html('Age');
       } else {
        $('#age-select-text').html('');
       }
       //prepend with /
       if(monthVals != '' && districtVals != '' && genderVals != '' && ethnicityVals != '' && ageVals != ''){
       window.location.replace('{{path('data')}}');
     }
      $.post('{{path('myajax')}}',
          { qname:qname,data_question:questions,data_age:ageVals,data_gender:genderVals,data_ethnicity:ethnicityVals,data_district:districtVals, data_month:monthVals, data_disability: disabilityVal , data_year: yearVal},
          function(response){
              var val=new Array();
              var dt= new Array();
              if(response.code == 100 && response.success){                 

                  //show custom legend on chart if number of items in legend is greater and equal to 4
                  var legend_item_height = 29;

                  $('.legend-box').show();
                  /*var legend_height = (response.result.series.length - 1) * legend_item_height + 15;
                  //height of last legend is 15 without margin
                  if(response.result.series.length >= 4) {
                      $('.legend-box').height(legend_height);
                      $('.legend-box').show();
                  } else {
                      $('.legend-box').hide();
                  }*/
                // easing added from https://github.com/danro/easing-js/blob/master/easing.js
                Math.customEase = function(pos) {
                  var s = 1.70158;
                  if((pos/=0.5) < 1) return 0.5*(pos*pos*(((s*=(1.525))+1)*pos -s));
                  return 0.5*((pos-=2)*pos*(((s*=(1.525))+1)*pos +s) +2);
                };

                  var chart=new Highcharts.chart({
                  chart: {
                          renderTo: 'canvas',
                          backgroundColor: '#ffffff',
                          borderWidth: 0,
                          height: response.result.height,
                          plotBorderWidth: 0,
                          plotShadow: true,
                          //renderTo: 'container',//#container: Not needed now
                          spacingRight: 0,
                          style: {
                            fontFamily: 'Roboto, Arial, sans-serif',
                            fontSize: '12px',
                          },

                          type: 'column',
                      },
                      colors:['#095d67','#7af2fe','#ffdf8e','#4b98d1','#2c9d48','#30efad','#9bbd3b','#588C73','#D96459'],
                      title: {
                          text: qname//There is no text in design: Answers by the people
                      },
                      subtitle: {
                          text: response.result.grouped//There is no text in design: Source: UNDP Annual Report
                      },
                      xAxis: {

                          labels: {
                              style: {'color': '#898989', 'fontSize': '14px', 'fontWeight': 'bold', 'textTransform': 'uppercase'}
                          },
                          categories: response.result.label,
                          title: {
                              enabled: false,
                              text: response.result.xlabel,// For x-axis label on table

                          }
                      },
                      scrollbar: {
                          enabled: true
                      },
                      yAxis: {
                          labels: {
                              style: {'color': '#959595', 'fontSize': '12px'}
                          },
                          min: 0,
                          title: {
                              text: ''//There is no text in design: People
                          }
                      },
                      /*tooltip: {
                          headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                          pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                              '<td style="padding:0"><b>{point.y} people</b></td></tr>',
                          footerFormat: '</table>',
                          shared: true,
                          useHTML: true
                      },*/

                      tooltip: {
                            formatter: function () {
                                return this.point.y + ' people says<br>' +
                                this.series.name.toLowerCase();
                                  //+ this.point.name.toLowerCase();
                            }
                        },
                      plotOptions: {
                          column: {
                              pointPadding: 0,
                              borderWidth: 0,
                              groupPadding: 0.2,
                          }
                      },
                      exporting: {
                          buttons: {
                              contextButton: {
                                  enabled: false,
                                  verticalAlign: "top",
                                  y: 0,
                              }
                          },
                          type: 'application/pdf',
                      },
                      series: response.result.series,
                       credits: {
                          enabled: false
                      },
                      plotOptions: {
                          column: {
                              stacking: response.result.stack
                          },
                          series: {
                              animation: {
                                  duration: 1000,
                                  easing: 'customEase'
                              }
                          }
                      },
                  });//Highchart end
                   $('.high-chart-wrap').removeClass('hidden');
                  //$('#table1').html(chart.getTable()); //Get table from highchart function 
                  $('#table1').html(response.result.html);
                  if(response.result.series === undefined){                    
                    $('.high-chart-wrap').addClass('hidden');
                    
                  }
                  $('#download-report').click(function () {
                      var chart = $('#canvas').highcharts();
                      chart.exportChart();
                  });

                  $('#table1 table').addClass('table-bordered table');   
                  $('.legend-box .legend2 ul li').html(response.result.total); 
                  
                  //download table
                  $('.dataTables').dataTable({
                      
                      "pageLength": 100,
                      responsive: true,
                      "tableTools": {
                          "sSwfPath": "/js/plugins/dataTables/swf/copy_csv_xls_pdf.swf"
                      },
                      "dom": 'T<"toolbar">lfrtip',
                      "aoColumnDefs": [ 
                         { "sTitle": $(".zelected").text(), "aTargets": [ 0 ] }
                       ],
                      "stitle":$(".zelected").text(),
                      "colVis": {
                          "buttonText": "Change columns"
                      }
                      
                  });
                  // $("div.toolbar").html();
                  $('.DTTT_button_xls span, .DTTT_button_csv span').html('Download');
                  $('.highcharts-title').hide();

              }//Ajax success end

          }, "json"); //.post end

    }; //abuttonpressed end

$(document).ready(function() {
  $('button, input[type="submit"], .question .next, .question .prev').on('click', function(){aButtonPressed();});
  aButtonPressed();
  $('select#form_questions').change(function() {
    aButtonPressed();
  });

   


});

</script>

{% endblock %}
